//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Control/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""GameplayInput"",
            ""id"": ""08c555dc-a94f-473b-94ee-a7ab368e0f7c"",
            ""actions"": [
                {
                    ""name"": ""FirstTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""b02d349e-f214-4b35-9e37-e2ebc10a71a2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstTouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a0e84128-342d-4255-a62f-ca1272030de4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SingleSwipeOnScreen"",
                    ""type"": ""PassThrough"",
                    ""id"": ""01ba5869-fd62-4bfa-8f96-5bf5e0c30f90"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""bb86858b-844f-4215-9b66-39920f68244d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e24adecf-6061-45b6-9eb5-2df4bfd7750b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2df7afd3-bd8e-483c-8309-258ad2c168bf"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""SingleSwipeOnScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57a6248f-320d-43e9-b099-b60d4b2da2ca"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eccb70ef-b4b6-4e1f-add2-5cf1c0ccbbde"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c69dc34-258b-4c89-98c2-c64dfdb61fe2"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1639351-1a64-4e41-90ce-87ad4708295a"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayInput
        m_GameplayInput = asset.FindActionMap("GameplayInput", throwIfNotFound: true);
        m_GameplayInput_FirstTouchContact = m_GameplayInput.FindAction("FirstTouchContact", throwIfNotFound: true);
        m_GameplayInput_FirstTouchPosition = m_GameplayInput.FindAction("FirstTouchPosition", throwIfNotFound: true);
        m_GameplayInput_SingleSwipeOnScreen = m_GameplayInput.FindAction("SingleSwipeOnScreen", throwIfNotFound: true);
        m_GameplayInput_SecondTouchContact = m_GameplayInput.FindAction("SecondTouchContact", throwIfNotFound: true);
        m_GameplayInput_SecondTouchPosition = m_GameplayInput.FindAction("SecondTouchPosition", throwIfNotFound: true);
    }

    ~@InputMap()
    {
        UnityEngine.Debug.Assert(!m_GameplayInput.enabled, "This will cause a leak and performance issues, InputMap.GameplayInput.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayInput
    private readonly InputActionMap m_GameplayInput;
    private List<IGameplayInputActions> m_GameplayInputActionsCallbackInterfaces = new List<IGameplayInputActions>();
    private readonly InputAction m_GameplayInput_FirstTouchContact;
    private readonly InputAction m_GameplayInput_FirstTouchPosition;
    private readonly InputAction m_GameplayInput_SingleSwipeOnScreen;
    private readonly InputAction m_GameplayInput_SecondTouchContact;
    private readonly InputAction m_GameplayInput_SecondTouchPosition;
    public struct GameplayInputActions
    {
        private @InputMap m_Wrapper;
        public GameplayInputActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstTouchContact => m_Wrapper.m_GameplayInput_FirstTouchContact;
        public InputAction @FirstTouchPosition => m_Wrapper.m_GameplayInput_FirstTouchPosition;
        public InputAction @SingleSwipeOnScreen => m_Wrapper.m_GameplayInput_SingleSwipeOnScreen;
        public InputAction @SecondTouchContact => m_Wrapper.m_GameplayInput_SecondTouchContact;
        public InputAction @SecondTouchPosition => m_Wrapper.m_GameplayInput_SecondTouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_GameplayInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayInputActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Add(instance);
            @FirstTouchContact.started += instance.OnFirstTouchContact;
            @FirstTouchContact.performed += instance.OnFirstTouchContact;
            @FirstTouchContact.canceled += instance.OnFirstTouchContact;
            @FirstTouchPosition.started += instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed += instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled += instance.OnFirstTouchPosition;
            @SingleSwipeOnScreen.started += instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.performed += instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.canceled += instance.OnSingleSwipeOnScreen;
            @SecondTouchContact.started += instance.OnSecondTouchContact;
            @SecondTouchContact.performed += instance.OnSecondTouchContact;
            @SecondTouchContact.canceled += instance.OnSecondTouchContact;
            @SecondTouchPosition.started += instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed += instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled += instance.OnSecondTouchPosition;
        }

        private void UnregisterCallbacks(IGameplayInputActions instance)
        {
            @FirstTouchContact.started -= instance.OnFirstTouchContact;
            @FirstTouchContact.performed -= instance.OnFirstTouchContact;
            @FirstTouchContact.canceled -= instance.OnFirstTouchContact;
            @FirstTouchPosition.started -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled -= instance.OnFirstTouchPosition;
            @SingleSwipeOnScreen.started -= instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.performed -= instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.canceled -= instance.OnSingleSwipeOnScreen;
            @SecondTouchContact.started -= instance.OnSecondTouchContact;
            @SecondTouchContact.performed -= instance.OnSecondTouchContact;
            @SecondTouchContact.canceled -= instance.OnSecondTouchContact;
            @SecondTouchPosition.started -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.performed -= instance.OnSecondTouchPosition;
            @SecondTouchPosition.canceled -= instance.OnSecondTouchPosition;
        }

        public void RemoveCallbacks(IGameplayInputActions instance)
        {
            if (m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayInputActions @GameplayInput => new GameplayInputActions(this);
    public interface IGameplayInputActions
    {
        void OnFirstTouchContact(InputAction.CallbackContext context);
        void OnFirstTouchPosition(InputAction.CallbackContext context);
        void OnSingleSwipeOnScreen(InputAction.CallbackContext context);
        void OnSecondTouchContact(InputAction.CallbackContext context);
        void OnSecondTouchPosition(InputAction.CallbackContext context);
    }
}
